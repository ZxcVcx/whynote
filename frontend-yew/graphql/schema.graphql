schema {
  query: QueryRoot
  mutation: MutationRoot
}

type Article {
  id: ObjectId!
  userId: ObjectId!
  subject: String!
  categoryId: ObjectId!
  summary: String!
  slug: String!
  uri: String!
  content: String!
  published: Boolean!
  top: Boolean!
  recommended: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentHtml: String!
  user: User!
  category: Category!
  topics: [Topic!]!
}

input ArticleNew {
  userId: ObjectId!
  subject: String!
  categoryId: ObjectId!
  summary: String!
  content: String!
}

type Category {
  id: ObjectId!
  name: String!
  description: String!
  quotes: Int!
  slug: String!
  uri: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  articles: [Article!]!
  topics: [Topic!]!
}

input CategoryNew {
  name: String!
  description: String!
}

type CategoryUser {
  id: ObjectId!
  userId: ObjectId!
  categoryId: ObjectId!
}

input CategoryUserNew {
  userId: ObjectId!
  categoryId: ObjectId!
}

scalar DateTime

type MutationRoot {
  userRegister(userNew: UserNew!): User!
  userChangePassword(
    oldPassword: String!
    newPassword: String!
    token: String!
  ): User!
  userUpdateProfile(userNew: UserNew!, token: String!): User!
  wishNew(wishNew: WishNew!): Wish!
  articleNew(articleNew: ArticleNew!): Article!
  categoryNew(categoryNew: CategoryNew!): Category!
  categoryUserNew(categoryUserNew: CategoryUserNew!): CategoryUser!
  categoryById(id: ObjectId!): Category!
  categoryBySlug(slug: String!): Category!
  topics: [Topic!]!
  topicById(id: ObjectId!): Topic!
  topicBySlug(slug: String!): Topic!
  topicsByArticleId(articleId: ObjectId!): [Topic!]!
  topicsByUserId(userId: ObjectId!): [Topic!]!
  topicsByUsername(username: String!): [Topic!]!
  topicsByCategoryId(categoryId: ObjectId!, published: Boolean!): [Topic!]!
}

scalar ObjectId

type QueryRoot {
  users(token: String!): [User!]!
  userByEmail(email: String!): User!
  userById(id: ObjectId!): User!
  userByUsername(username: String!): User!
  userSignIn(signature: String!, cred: String!): SignInfo!
  articleByUsernameAndSlug(username: String!, slug: String!): Article!
  articleBySlug(slug: String!): Article!
  articles(published: Boolean!): [Article!]!
  articlesInPosition(
    username: String!
    position: String!
    limit: Int!
  ): [Article!]!
  articlesByUserId(userId: ObjectId!, published: Boolean!): [Article!]!
  articlesByUsername(username: String!, published: Boolean!): [Article!]!
  articlesByCategoryId(categoryId: ObjectId!, published: Boolean!): [Article!]!
  articlesByTopicId(topicId: ObjectId!, published: Boolean!): [Article!]!
  categories: [Category!]!
  categoriesByUserId(userId: ObjectId!): [Category!]!
  categoriesByUsername(username: String!): [Category!]!
  categoryById(id: ObjectId!): Category!
  categoryBySlug(slug: String!): Category!
  topics: [Topic!]!
  topicById(id: ObjectId!): Topic!
  topicBySlug(slug: String!): Topic!
  topicsByArticleId(articleId: ObjectId!): [Topic!]!
  topicsByUserId(userId: ObjectId!): [Topic!]!
  topicsByUsername(username: String!): [Topic!]!
  topicsByCategoryId(categoryId: ObjectId!, published: Boolean!): [Topic!]!
  wishes(published: Int!): [Wish!]!
  randomWish(username: String!): Wish!
}

type SignInfo {
  email: String!
  username: String!
  token: String!
}

type Topic {
  id: ObjectId!
  name: String!
  quotes: Int!
  slug: String!
  uri: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  articles: [Article!]!
}

# Complex Object
# https://async-graphql.github.io/async-graphql/en/define_simple_object.html#user-defined-resolvers
type User {
  id: ObjectId!
  email: String!
  username: String!
  nickname: String!
  picture: String!
  cred: String!
  blogName: String!
  website: String!
  bio: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  banned: Boolean!
  articles(published: Boolean!): [Article!]!
}

# New User
input UserNew {
  email: String!
  username: String!
  nickname: String!
  cred: String!
  blogName: String!
  website: String!
  bio: String!
}

type Wish {
  id: ObjectId!
  userId: ObjectId!
  aphorism: String!
  author: String!
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

input WishNew {
  userId: ObjectId!
  aphorism: String!
  author: String!
}
